#! -*- coding: utf-8 -*-
"""
Django settings for zenit project.

Generated by 'django-admin startproject' using Django 1.10.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
PRODUCTION = True
#PRODUCTION = False

if PRODUCTION:
    import ldap
    from django_auth_ldap.config import LDAPSearch

    import zenit.local_settings as local_settings

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = local_settings.SECRET_KEY


ALLOWED_HOSTS = local_settings.ALLOWED_HOSTS


# Application definition

INSTALLED_APPS = [
    'isystems.apps.IsystemsConfig',
    'organizations.apps.OrganizationsConfig',
    'people.apps.PeopleConfig',
    'contracts.apps.ContractsConfig',
    'planpost.apps.PlanpostConfig',
    'schedule_charts.apps.ScheduleChartsConfig',
    'docs.apps.DocsConfig',
    'bootstrap3',
    'django_tables2',
    'django_filters',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mptt',
    'widget_tweaks',
    'multiselectfield',
    'positions',
    'help_info',
#    'simple_forms.apps.core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.RemoteUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if PRODUCTION:
    AUTHENTICATION_BACKENDS = [
        'django_remote_auth_ldap.backend.RemoteUserLDAPBackend',
    ]
else:
    pass

ROOT_URLCONF = 'zenit.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #'DIRS': ['zenit/base_templates'],
	    'DIRS': [os.path.join(BASE_DIR, "templates")],
	    'DIRS': [os.path.join(BASE_DIR, "zenit/base_templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zenit.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

if PRODUCTION:
    DATABASES = local_settings.DATABASES
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR,'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Asia/Vladivostok'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

MPTT_ADMIN_LEVEL_INDENT = 20

if PRODUCTION:
    # Baseline LDAP configuration.
    AUTH_LDAP_SERVER_URI = local_settings.AUTH_LDAP_SERVER_URI
    AUTH_LDAP_AUTHORIZE_ALL_USERS = True
    AUTH_LDAP_PERMIT_EMPTY_PASSWORD = True

    # Логин пользователя от чьего имени будут выполнятся запросы к LDAP (кроме авторизации)
    AUTH_LDAP_BIND_DN = local_settings.AUTH_LDAP_BIND_DN
    AUTH_LDAP_BIND_PASSWORD = local_settings.AUTH_LDAP_BIND_PASSWORD

    # Настройка будет пытаться найти пользователя в созданной нами OU Django и стандартной папке Users,
    # сопоставляя введенный login пользователя с аттрибутами sAMAccountName
    #AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(
    #        LDAPSearch("ou=Ruik,dc=DMN,dc=TN,dc=CORP", ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)"),
    #        LDAPSearch("OU=Users,OU=DMN,DC=DMN,DC=TN,DC=CORP", ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)"),
    #)

    AUTH_LDAP_USER_SEARCH = LDAPSearch(local_settings.LDAP_SEARCH_PATH, ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)")


    # Populate the Django user from the LDAP directory.
    # Указываем как переносить данные из AD в стандартный профиль пользователя Django
    AUTH_LDAP_USER_ATTR_MAP = {
        "first_name": "givenName",
        "last_name": "sn",
        "email": "mail"
    }
    # Указываем как переносить данные из AD в расширенный профиль пользователя Django
    AUTH_LDAP_PROFILE_ATTR_MAP = {
        "phone": "mail"
    }

    # Указываем привязку стандартных флагов is_active, is_staff и is_superuser к членству в группах AD
    # Флаг is_active при использовании django_remote_auth_ldap сам по себе не оказывает вляния на разрешение аутнтификации
    # поэтому для создания обычного поведения Django также определяме настройку AUTH_LDAP_REQUIRE_GROUP (см.выше)
    #AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    #    "is_active": "cn=active,ou=Groups,ou=Django,dc=company,dc=ru",
    #    "is_staff": "cn=staff,ou=Groups,ou=Django,dc=company,dc=ru",
    #    "is_superuser": "cn=superuser,ou=Groups,ou=Django,dc=company,dc=ru"
    #}

    # Указываем привязку флагов расширенного профиля к членству в группах AD
    #AUTH_LDAP_PROFILE_FLAGS_BY_GROUP = {
    #    "is_awesome": "cn=awesome,ou=Groups,ou=Django,dc=company,dc=ru",
    #}

    # This is the default, but I like to be explicit.
    AUTH_LDAP_ALWAYS_UPDATE_USER = True

    # Use LDAP group membership to calculate group permissions.
    #AUTH_LDAP_FIND_GROUP_PERMS = True

    # Cache group memberships for an hour to minimize LDAP traffic
    #AUTH_LDAP_CACHE_GROUPS = True
    #AUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600

    DRAL_CHECK_DOMAIN = False

BOOTSTRAP3 = {

    # The URL to the jQuery JavaScript file
    'jquery_url': '/static/js/jquery-3.1.1.js',

    # The Bootstrap base URL
    'base_url': '/static/bootstrap-3.3.7-dist/',

    # The complete URL to the Bootstrap CSS file (None means derive it from base_url)
    'css_url': '/static/bootstrap-3.3.7-dist/css/bootstrap.min.css',

    # The complete URL to the Bootstrap CSS file (None means no theme)
    'theme_url': '/static/bootstrap-3.3.7-dist/css/bootstrap-theme.min.css',

    # The complete URL to the Bootstrap JavaScript file (None means derive it from base_url)
    'javascript_url': '/static/bootstrap-3.3.7-dist/js/bootstrap.min.js',

    # Put JavaScript in the HEAD section of the HTML document (only relevant if you use bootstrap3.html)
    'javascript_in_head': True,

    # Include jQuery with Bootstrap JavaScript (affects django-bootstrap3 template tags)
    'include_jquery': True,

    # Label class to use in horizontal forms
    'horizontal_label_class': 'col-md-3',

    # Field class to use in horizontal forms
    'horizontal_field_class': 'col-md-9',

    # Set HTML required attribute on required fields, for Django <= 1.8 only
    'set_required': True,

    # Set HTML disabled attribute on disabled fields, for Django <= 1.8 only
    'set_disabled': False,

    # Set placeholder attributes to label if no placeholder is provided
    'set_placeholder': True,

    # Class to indicate required (better to set this in your Django form)
    'required_css_class': '',

    # Class to indicate error (better to set this in your Django form)
    'error_css_class': 'has-error',

    # Class to indicate success, meaning the field has valid input (better to set this in your Django form)
    'success_css_class': 'has-success',

    # Renderers (only set these if you have studied the source and understand the inner workings)
    'formset_renderers':{
        'default': 'bootstrap3.renderers.FormsetRenderer',
    },
    'form_renderers': {
        'default': 'bootstrap3.renderers.FormRenderer',
    },
    'field_renderers': {
        'default': 'bootstrap3.renderers.FieldRenderer',
        'inline': 'bootstrap3.renderers.InlineFieldRenderer',
    },
}
